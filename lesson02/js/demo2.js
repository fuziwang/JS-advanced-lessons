//基本数据类型和引用数据类型的内存分配不同
var a = 10; //a是全局变量 类似于window.a 
function foo() {
    var a = 20; //栈区
    var b = '10'; //栈区
    var obj = { name: 'Lily', age: 12 };
    // obj的引用存在栈中，{ name: 'Lily', age: 12 }存在堆中，通过栈中的变量名obj(访问地址)访问
    //栈区自动清除机制
    /* 当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量将会逐个放入这块栈内存里，
    随着方法的执行结束，这个方法的内存栈也将自然销毁了。因此，所有在方法中定义的变量都是放在栈内存中的；*/
    //堆区垃圾回收机制
    /* 当我们在程序中创建一个对象时， 这个对象将被保存到运行时数据区中， 以便反复利用（因为对象的创建成本通常较大）， 
    这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁， 即使方法结束后， 这个对象还可能被另一个引用变量所引用
    （方法的参数传递时很常见）， 则这个对象依然不会被销毁， 只有当一个对象没有任何引用变量引用它时， 系统的垃圾回收机制才会在
    核实的时候回收它。*/
}
// foo也是全局变量 类似于window.foo